# Azure DevOps Pipeline

name: $(Date:yyyyMMdd)$(Rev:r)

trigger:
- main

stages:
- stage: BuildNuget
  displayName:  'Build NuGet packages'
  jobs:
  - job: BuildTestPackageNuGet
    displayName: 'Build'
    strategy:
      matrix:
        Windows:
          vmImage: 'windows-latest'
          artifactName: 'nuget-windows'
        macOS:
          vmImage: 'macOS-latest'
          artifactName: 'nuget-macos'
        Linux:
          vmImage: 'ubuntu-latest'
          artifactName: 'nuget-linux'
      maxParallel: 3

    pool:
      vmImage: '$(vmImage)'

    variables:
      dotnetBuildConfiguration: 'Release'
      dotnetVerbosity: 'Detailed'

      pathToBuildProjects: '**/**/*.*sproj'
      pathToTestProjects: '**/test/**/*.Test.*sproj'
      pathToPackProjects: '**/src/**/*.*sproj'
      pathToNugetPackages: '**/*.nupkg'

      sourceRepositoryBranch: '$(Build.SourceBranchName)'
      sourceRepositoryCommit: '$(Build.SourceVersion)'

    steps:

    - task: UseDotNet@2
      displayName: 'Install: .NET Core SDK'
      inputs:
        useGlobalJson: true

    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: restore
        projects: '$(pathToBuildProjects)'
        arguments: '--verbosity $(dotnetVerbosity)'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        command: build
        projects: '$(pathToBuildProjects)'
        arguments: '--configuration $(dotnetBuildConfiguration) --verbosity $(dotnetVerbosity)'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet pack: ci'
      inputs:
        command: custom
        custom: pack
        projects: '$(pathToPackProjects)'
        arguments: '--output "$(Build.ArtifactStagingDirectory)/ci" --configuration $(dotnetBuildConfiguration) --verbosity $(dotnetVerbosity) /p:Configuration=$(dotnetBuildConfiguration) /p:RepositoryBranch=$(sourceRepositoryBranch) /p:RepositoryCommit=$(sourceRepositoryCommit) /p:VersionSuffix=ci-$(Build.BuildNumber)'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet pack: release'
      inputs:
        command: custom
        custom: pack
        projects: '$(pathToPackProjects)'
        arguments: '--output "$(Build.ArtifactStagingDirectory)/release" --configuration $(dotnetBuildConfiguration) --verbosity $(dotnetVerbosity) /p:Configuration=$(dotnetBuildConfiguration) /p:RepositoryBranch=$(sourceRepositoryBranch) /p:RepositoryCommit=$(sourceRepositoryCommit)'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet test'
      inputs:
        command: test
        projects: '$(pathToTestProjects)'
        arguments: '--configuration $(dotnetBuildConfiguration) --collect "Code coverage" -- Expecto.fail-on-focused-tests=true'

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: '$(artifactName)'

- stage: SignNuget
  displayName: 'Sign NuGet packages'
  dependsOn: BuildNuget
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - job: SignNuGet
    displayName: 'Sign Windows'
    pool:
        vmImage: 'windows-latest'

    variables:
    - group: Active Login   # Contains codesigningCertPassword: Password for code signing cert

    - name: sourceArtifactName
      value: 'nuget-windows'

    - name: targetArtifactName
      value: 'nuget-windows-signed'

    - name: pathToNugetPackages
      value: '**/*.nupkg'

    steps:
    - download: current
      artifact: '$(sourceArtifactName)'

    - task: DownloadSecureFile@1
      displayName: 'Download secure file: DigicertCodeSignCertificate.p12'
      name: codesigningCert
      inputs:
        secureFile: 'DigicertCodeSignCertificate.p12'

    - task: NuGetToolInstaller@1
      displayName: 'Install: NuGet'
      inputs:
        versionSpec: 5.x

    - task: SSMClientToolsSetup@1
      displayName: 'Install DigiCert​​®​​ Software Trust Manager'
    - task: SSMSigningToolsSetup@1

    - task: CmdLine@2
      inputs:
        script: 'smctl certificate download --keypair-alias=FLTest-1 --name=KeyCert.pem --out=$(Agent.TempDirectory)'
      env:
        SM_HOST: $(DigiCert.ProdHost)
        SM_API_KEY: $(DigiCert.ApiKey)
        SM_CLIENT_CERT_PASSWORD: $(DigiCert.ClientCertPassword)
        SM_CLIENT_CERT_FILE: $(codesigningCert.secureFilePath)

    - task: NuGetCommand@2
      displayName: 'nuget sign'
      inputs:
        command: custom
        arguments: 'sign "$(Pipeline.Workspace)/$(pathToNugetPackages)" -CertificatePath "$(codesigningCert.secureFilePath)" -CertificatePassword "$(DigiCert.ClientCertPassword)" -Timestamper "$(codesigningTimestamperUrl)"'

    - publish: '$(Pipeline.Workspace)/$(sourceArtifactName)'
      artifact: '$(targetArtifactName)'
